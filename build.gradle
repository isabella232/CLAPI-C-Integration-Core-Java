buildscript {
    ext {
        // detect TeamCity CI/CD!
        // setting compatibility flag when compiling with version > 1.8
        // since JDK 1.9, the major version is > 1 (eg: 9)
        isCiCdBuild = hasProperty('teamcity') || hasProperty("JENKINS_URL") || System.getenv("JENKINS_URL") != null || System.getenv("TF_BUILD") != null


        // test for Java8 compiler
        // since JDK 1.9, the major version is > 1 (eg: 9)
        isJava8Compiler = "1".equals(System.getProperty("java.version").replaceAll("\\..*", ""))


        // force Java8 compatible build with TeamCity/Jenkins CI/CD!
        // setting compatibility flag when compiling with version > 1.8
        // since JDK 1.9, the major version is > 1 (eg: 9)
        isJava8Build = isCiCdBuild || isJava8Compiler

        majorVersion = 1
    }
    repositories {
        repositories {
            mavenLocal()
            mavenCentral()
            jcenter()
            gradlePluginPortal()
        }
    }
    dependencies {
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"

        classpath "com.github.jengelman.gradle.plugins:shadow:5.1.0"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.21"
        classpath "gradle.plugin.com.github.b3er.local.properties:local-properties-plugin:1.1"

        if (!isJava8Compiler) {
            classpath "org.openjfx:javafx-plugin:0.0.8"
        }
    }
}


plugins {
    id "checkstyle"
}


apply plugin: "java"
apply plugin: "eclipse"

// rename local.properties.template -> local.properties
apply plugin: "com.github.b3er.local.properties"

group = "io.smint"
version = "${majorVersion}.8.3"


sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


test {
    useJUnitPlatform()
}


eclipse {
    project {
        name = "smintio-integration"
    }
}

subprojects { proj ->
    proj.version = parent.version
    group = parent.group

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven {
            url "https://smintio.pkgs.visualstudio.com/_packaging/CLAPIC-API-Clients/maven/v1"
            credentials {
                username "AZURE_ARTIFACTS"
                password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "${azureArtifactsGradleAccessToken}"
            }
        }
    }


    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "checkstyle"

    // see https://stackoverflow.com/questions/42599422/warning-options-bootstrap-class-path-not-set-in-conjunction-with-source-1-7
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(Test) {
        systemProperty "file.encoding", "UTF-8"
    }


    dependencies {
        testImplementation("org.mockito:mockito-core:[2.0,4.0)")

        testImplementation("org.junit.jupiter:junit-jupiter-api:[5.5.0,6.0)")
        testImplementation("org.mockito:mockito-junit-jupiter:[2.0,4.0)")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:[5.5.0,6.0)")
        testRuntimeOnly("org.junit.vintage:junit-vintage-engine:[5.5.0,6.0)")
    }

    task sourceJar(type: Jar, dependsOn: "classes") {
        from sourceSets.main.allSource
        classifier = "sources"
    }

    task javadocJar(type: Jar, dependsOn: "javadoc") {
        from javadoc
        classifier = "javadoc"
    }

    // https://github.com/gradle/gradle/issues/4618
    test {
        useJUnitPlatform()

        testLogging {
            showStandardStreams = (System.getProperty("logging.enabled", "false") == "true")
        }
        systemProperties = System.properties
        if (!isCiCdBuild && proj.file("src/test/resources/logging.properties").exists()) {
            systemProperty("java.util.logging.config.file", proj.file("src/test/resources/logging.properties").getAbsolutePath())
        }
    }


    checkstyle {
        configFile = rootProject.file("config/checkstyle/checkstyle.xml")
        configProperties = [
            "configDir": rootProject.file("config/checkstyle"),
            "baseDir": proj.file("src/"),
        ]
        toolVersion = "8.25"
        ignoreFailures = true
    }


    javadoc.destinationDir = rootProject.file("docs/" + project.name + "/${majorVersion}")
    javadoc.options.overview = file("src/main/javadoc/overview.html")
    javadoc.options.links.add("https://docs.oracle.com/javase/8/docs/api/")
    javadoc.options.links.add("https://javaee.github.io/javaee-spec/javadocs/")
    javadoc.options.noTimestamp = true
    javadoc.options.bottom = "Copyright &#169; 2019. All rights reserved."

    build.finalizedBy("javadoc")


    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourceJar
                artifact javadocJar
            }
        }

        // Repositories *to* which Gradle can publish artifacts
        repositories {


            maven {


                url "https://smintio.pkgs.visualstudio.com/_packaging/CLAPIC-API-Clients/maven/v1"
                name "CLAPIC-API-Clients"
                credentials {
                    username hasProperty("maven_url_username") ?  property("maven_url_username") : "Azure DevOps Services"
                    password hasProperty("maven_url_userPassword") ? property("maven_url_userPassword") : System.getenv("Azure DevOps Services_ENV_ACCESS_TOKEN")
                }
            }
        }
    }
}
